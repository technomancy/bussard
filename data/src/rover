-- -*- lua -*-

local colors = {red={255, 10, 10}, green={10, 255, 10}, blue={10, 10, 255}}
local base_shift = 0.9

local draw_box = function(box, x, y, w, h, d)
   local shift = (d or 0) + base_shift
   graphics.setColor(colors[box.color] or {255,255,255})
   graphics.rectangle("line", x, y, w, h)
   graphics.rectangle("line", x*shift, y*shift, w*shift, h*shift)
   for cx = 0,1 do
      for cy = 0,1 do
         graphics.line(x+cx*w, y+cy*h, (x+cx*w)*shift, (y+cy*h)*shift)
      end
   end
end

local drawers = {
   door = function(box, x, y, w, h, d)
      local y2, h2
      graphics.push()
      if(box.vertical) then graphics.rotate(math.pi/2) end

      if(box.open) then
         y2, h, h2 = y + h*0.8, h*0.2, h*0.2
      else
         y2, h, h2 = y + h/2, h/2, h/2
      end

      draw_box(box, x, y, w, h2, d)
      draw_box(box, x, y2, w, h, d)
      graphics.pop()
   end,

   term = function(box, x, y, w, h, d)
      x, y, w, h = x+0.1, y+0.1, w-0.2, h-0.2
      draw_box(box, x, y, w, h, d)
      graphics.setColor({0,0,0, 235})
      graphics.rectangle("fill", x+0.02, y+0.02, w-0.04, h-0.04)
      graphics.setColor(colors[box.color] or {255,255,255})
      graphics.line(x+0.2, y+0.2, x+w/2, y+h/2)
      graphics.line(x+0.2, y+h-0.2, x+w/2, y+h/2)
      graphics.line(x+w/2, y+h-0.2, x+w-0.2, y+h-0.2)
   end,
}

local rover_points = {0,-1, 1,-2, 3,2, 0,4, -3,2, -1,-2}

local draw_grid = function()
   graphics.push()
   graphics.scale(base_shift)
   graphics.setColor({10,70,10})
   for g=-10.5,10.5 do
      graphics.line(g,-10.5,g,10.5)
      graphics.line(-10.5,g,10.5,g)
   end
   graphics.pop()
end

local draw = function()
   if(not ship.rover_state) then return end
   local state, x,y,w,h = ship.rover_state, unpack(ship.rover_state.rover)
   graphics.push()
   graphics.setLineWidth(0.05)
   local ew, eh = ship.editor.get_wh()
   graphics.translate(ew/2-editor.get_prop("x_offset", 0),
                      eh/2-editor.get_prop("y_offset", 0))
   graphics.print(string.format("x: %s y: %s", x,y), -ew/2+10, -eh/2+10)
   graphics.scale(editor.get_prop("scale", 64))
   draw_grid()
   for _,box in ipairs(state.rects) do
      if(drawers[box.type]) then
         drawers[box.type](box, unpack(box))
      else
         draw_box(box, unpack(box))
      end
   end
   graphics.setColor(colors.red)
   graphics.setLineWidth(0.5)
   graphics.rotate(state.r or 0)
   graphics.scale(w/10, h/10)
   graphics.polygon("line", rover_points)
   graphics.pop()
end

local move = function(dx, dy)
   return function()
      editor.vary_prop("x_offset", utils.fnil(utils.adder(dx), 0))
      editor.vary_prop("y_offset", utils.fnil(utils.adder(dy), 0))
   end
end

define_mode("rover", "flight", {draw=draw, full_draw=false, read_only=true})
bind("rover", "up", move(0, -1))
bind("rover", "down", move(0, 1))
bind("rover", "left", move(-1, 0))
bind("rover", "right", move(1, 0))

bind("rover", "wheel_up", function()
        editor.vary_prop("scale", function(s) return (s or 5) + 0.5 end)
end)
bind("rover", "wheel_down", function()
        editor.vary_prop("scale", function(s) return (s or 5) - 0.5 end)
end)

bind("rover", "ctrl-x 1", editor.split)
bind("rover", "ctrl-x 2", lume.fn(editor.split, "vertical"))
bind("rover", "ctrl-x 3", lume.fn(editor.split, "horizontal"))
bind("rover", "ctrl-x 4", lume.fn(editor.split, "triple"))
bind("rover", "ctrl-x o", editor.focus_next)

bind("rover", "escape", function() editor.change_buffer("*flight*") end)

